trigger:
 branches:
  include:
  - master
 paths:
  include:
  - Source/*

pr:
 branches:
   include:
     - master
 paths:
  include:
  - Source/*

pool:
  name: TimeWarpEnterprises

variables:
 Major: '1'
 Minor: '0'
 MajorAndMinor: "$(Major).$(Minor)"
 Patch: $[counter(variables.MajorAndMinor,0)]
 DotNetSdkVersion: 3.0.100
 Version: "$(Major).$(Minor).$(Patch)+$(DotNetSdkVersion)"
 Configuration: debug

steps:
- script: |
    echo Version $(Version)
    cleanup -y

- task: dutchworkz.DisplayAllVariables.DisplayAllVariables.DutchWorkzToolsAllVariables@1
  displayName: 'Show all build variables in build output.'

- task: DotNetCoreCLI@2
  displayName: Build BlazorState
  inputs:
    command: build
    arguments: '-maxcpucount:1 -p:Version=$(Version)'
    projects: 'Source/BlazorState/BlazorState.csproj'

- powershell: |
   Write-Host $(Version)
   New-Item $(System.DefaultWorkingDirectory)/Source/BlazorState/bin/Version.txt -Force
   Set-Content $(System.DefaultWorkingDirectory)/Source/BlazorState/bin/Version.txt $(Version)
  displayName: 'PowerShell Script'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/Source/BlazorState/bin/Version.txt'
    ArtifactName: Version
    publishLocation: Container

- task: DotNetCoreCLI@2
  displayName: Run all Tests in the repo gather coverage data
  continueOnError: false
  inputs:
    command: test
    arguments: '-maxcpucount:1 /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:UseSourceLink=true /p:Include="[BlazorState]*"'
    projects: '**/*.Integration.Tests/*.csproj'

- script: npm test
  workingDirectory: '$(Build.SourcesDirectory)/Tests/EndToEnd.TestCafe.Tests'
  displayName: Run TestCafe End to End Tests.

- task: reportgenerator@4
  displayName: ReportGenerator
  inputs:
    reports: '$(Build.SourcesDirectory)/Tests/**/coverage.cobertura.xml'
    targetdir: $(Build.SourcesDirectory)/CodeCoverage
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    historydir: $(Build.SourcesDirectory)/CodeCoverage/History
    assemblyfilters: '+BlazorState'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

# Upload coverage to codecov.io
# - script: |
#    %USERPROFILE%\.nuget\packages\codecov\1.5.0\tools\codecov.exe -f "./test/MyTestProject/coverage.opencover.xml" -t $(CODECOV_TOKEN)
# displayName: Upload coverage to codecov.io

- task: PublishBuildArtifacts@1
  displayName: Publish Nuget Artifact
  inputs:
    PathtoPublish: $(System.DefaultWorkingDirectory)/Source/BlazorState/bin/Packages
    ArtifactName: Nuget
    publishLocation: Container
